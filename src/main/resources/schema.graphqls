type User {
  id: ID!
  name: String!
  email: String
  password: String
}

input AuthData {
  email: String!
  password: String!
}

type SigninPayload {
  token: String
  user: User
}

type Match {
    id: ID!
    url: String!
    description: String!
    firstUser: User!
    secondUser: User!
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    match: Match!
}

scalar DateTime

input MatchFilter {
  description_contains: String
  url_contains: String
}

input UserFilter {
  name_contains: String
  email_contains: String
}

type Query {
  allMatches(filter: MatchFilter, skip: Int = 0, first: Int = 0): [Match]
  allUsers(filter: UserFilter, skip: Int = 0, first: Int = 0): [User]
}

type Mutation {
  createUser(name: String!, authProvider: AuthData!): User
  createMatch(url: String!, description: String!, firstUserId: ID!, secondUserId: ID!): Match
  signinUser(auth: AuthData): SigninPayload
  createVote(matchId: ID, userId: ID): Vote
}

schema {
  query: Query
  mutation: Mutation
}